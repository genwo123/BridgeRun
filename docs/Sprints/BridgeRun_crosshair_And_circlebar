# 브릿지런 개발일지 (스프린트 13)

## 📅 개발 기간
2025년 5월 05일 ~ 2025년 5월 18일

## 👨‍💻 작성자
김건우

## 1. 주요 개발 목표
스프린트 13에서는 게임 내 시각적 피드백 시스템 개선에 집중했습니다:

* 크로스헤어 시스템 구현
* 설치 진행도 표시를 위한 원형 프로그레스 바 구현
* 설치 가능 영역에 대한 시각적 피드백 개선
* 이동 시 설치 취소 기능 구현
* 직관적인 UI 시스템을 통한 플레이어 경험 향상

## 2. 크로스헤어 및 프로그레스 바 시스템

### 2.1 설계 요구사항
플레이어가 게임 내에서 더 나은 피드백을 받을 수 있도록 다음과 같은 요구사항을 정의했습니다:

* 화면 중앙에 항상 표시되는 크로스헤어
* 건설 모드에서 설치 중일 때만 표시되는 원형 프로그레스 바
* 설치 시간에 따라 점진적으로 채워지는 시각적 표현
* 이동 시 설치가 자동 취소되는 기능

### 2.2 UI 위젯 구성
위 요구사항을 달성하기 위해 두 가지 주요 UI 컴포넌트를 설계했습니다:

1. **크로스헤어 (Crosshair Image)**:
   - WBP_Player 위젯에 중앙 배치
   - 플레이어의 조준점 역할
   - 항상 표시되도록 설정

2. **원형 프로그레스 바 (WBP_RoundBar)**:
   - 커스텀 원형 이미지 기반 프로그레스 표시
   - 설치 시간에 따라 진행도 표시
   - 건설 중일 때만 표시되도록 설정

[크로스헤어와 프로그레스 바 UI 이미지]

### 2.3 프로그레스 바 구현
원형 프로그레스 바는 커스텀 머티리얼을 사용하여 구현했습니다:

1. **머티리얼 설계**:
   - 스칼라 파라미터(Progress)를 이용한 원형 채움 효과
   - 0.0~1.0 사이의 값으로 진행도 표현
   - UMG 위젯과 연동하여 동적 업데이트

[프로그레스 바 머티리얼 그래프 이미지]

2. **위젯 블루프린트 로직**:

```
[Event Tick] →
[GetOwningPlayerPawn] → [Cast To BP_Citizen] → [IsValid?] →
[True] → [GetBuildingComponent] → [IsValid?] →
[True] → [GetCurrentBuildProgress] → [Set Percent (Self)]
```

## 3. BuildingComponent 확장

### 3.1 설치 시간 시스템
기존 BuildingComponent에 설치 프로그레스 시스템을 추가했습니다:

```cpp
// 프로그레스 관련 변수
UPROPERTY(ReplicatedUsing = OnRep_BuildProgress, BlueprintReadOnly, Category = "Building|UI")
float CurrentBuildProgress = 0.0f;  // 0.0~1.0 사이 값

UFUNCTION()
void OnRep_BuildProgress();

// 진행도 접근 함수
UFUNCTION(BlueprintPure, Category = "Building")
float GetCurrentBuildProgress() const { return CurrentBuildProgress; }

UFUNCTION(BlueprintPure, Category = "Building")
bool IsBuilding() const { return bIsBuilding; }
```

### 3.2 설치 로직 개선
기존의 즉시 설치 방식에서 시간에 따른 점진적 설치 방식으로 변경했습니다:

```cpp
void UBuildingComponent::AttemptBuild_Implementation()
{
    // 기존 검증 코드...
    
    // 즉시 아이템 생성이 아닌 타이머 시작
    bIsBuilding = true;
    CurrentBuildProgress = 0.0f;
    
    // 설치 시간에 따른 타이머 설정
    float BuildTime = (CurrentBuildingItem == EInventorySlot::Plank) ? 
        PlankBuildTime : TentBuildTime;
    
    GetWorld()->GetTimerManager().SetTimer(
        BuildTimerHandle,
        this,
        &UBuildingComponent::FinishBuild,
        BuildTime,
        false
    );
    
    // 네트워크 업데이트
    GetOwner()->ForceNetUpdate();
}
```

### 3.3 실시간 진행도 업데이트
TickComponent 함수를 수정하여 설치 진행도를 실시간으로 업데이트하도록 구현했습니다:

```cpp
void UBuildingComponent::TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)
{
    Super::TickComponent(DeltaTime, TickType, ThisTickFunction);
    
    // 기존 코드...
    
    // 설치 중일 때 진행도 업데이트
    if (bIsBuilding && GetOwner()->HasAuthority())
    {
        float BuildTime = (CurrentBuildingItem == EInventorySlot::Plank) ? 
            PlankBuildTime : TentBuildTime;
        float RemainingTime = GetWorld()->GetTimerManager().GetTimerRemaining(BuildTimerHandle);
        
        // 진행도 계산 (1.0 - 남은시간/총시간)
        CurrentBuildProgress = 1.0f - (RemainingTime / BuildTime);
        
        // 이동 감지
        if (OwnerCitizen)
        {
            static FVector LastPosition = OwnerCitizen->GetActorLocation();
            FVector CurrentPosition = OwnerCitizen->GetActorLocation();
            
            if (FVector::Distance(LastPosition, CurrentPosition) > 10.0f)
            {
                CancelBuild();
            }
            
            LastPosition = CurrentPosition;
        }
    }
}
```

## 4. 위젯 블루프린트 구현

### 4.1 WBP_RoundBar 위젯
원형 프로그레스 바 위젯은 이벤트 틱을 통해 설치 진행도를 가져와 시각화합니다:

[프로그레스 바 위젯 블루프린트 이미지]

설치 중이 아닐 때는 위젯이 숨겨지고, 설치 중일 때만 표시되도록 구현했습니다:

```
[Event Tick] →
[GetOwningPlayerPawn] → [Cast To BP_Citizen] → [IsValid?] →
[True] → [GetBuildingComponent] → [IsValid?] →
[True] → [Branch: IsBuilding()] →
[True] → [Set Visibility (Visible)] → [GetCurrentBuildProgress] → [Set Percent]
[False] → [Set Visibility (Hidden)]
```

### 4.2 WBP_Player 위젯
메인 플레이어 UI 위젯에 크로스헤어와 프로그레스 바를 통합했습니다:

* 크로스헤어는 중앙에 고정 배치
* 프로그레스 바는 크로스헤어 주변에 배치
* 아이템 슬롯 UI와의 간섭 최소화

[통합된_UI_레이아웃 이미지]

## 5. 구현 과정에서 발생한 문제점과 해결

### 5.1 메모리 접근 위반 오류
위젯 블루프린트에서 NULL 포인터 참조로 인한 크래시가 발생했습니다:

```
EXCEPTION_ACCESS_VIOLATION reading address 0x0000000000000007
```

#### 문제 해결
모든 객체 참조에 IsValid 검사를 추가하여 문제를 해결했습니다:

```
[GetOwningPlayerPawn] → [IsValid?] →
[True] → [Cast To BP_Citizen] → [IsValid?] →
[True] → [GetBuildingComponent] → [IsValid?] →
[True] → // 안전하게 접근
```

### 5.2 네트워크 동기화 문제
클라이언트에서 프로그레스 바 업데이트가 지연되는 문제가 발생했습니다.

#### 문제 해결
CurrentBuildProgress 변수에 ReplicatedUsing 속성을 추가하여 복제 업데이트 시 UI가 자동으로 갱신되도록 수정했습니다:

```cpp
UPROPERTY(ReplicatedUsing = OnRep_BuildProgress, BlueprintReadOnly, Category = "Building|UI")
float CurrentBuildProgress = 0.0f;

void UBuildingComponent::OnRep_BuildProgress()
{
    // 클라이언트 측 UI 업데이트
}
```

## 6. 최종 구현 및 통합

### 6.1 게임플레이 개선

구현된 크로스헤어와 프로그레스 바 시스템을 통해 다음과 같은 게임플레이 개선이 이루어졌습니다:

* 플레이어는 설치 가능 지점을 더 명확하게 파악 가능
* 설치 시간에 대한 직관적인 피드백 제공
* 이동 시 설치 자동 취소를 통한 사용성 향상
* 시각적 피드백을 통한 게임 몰입도 증가

### 6.2 최종 통합 결과

[최종_통합_결과_이미지]

크로스헤어와 프로그레스 바 시스템을 성공적으로 구현하여 다음과 같은 효과를 얻었습니다:

* 직관적인 UI를 통한 사용자 경험 향상
* 설치 가능 여부에 대한 명확한 시각적 피드백
* 진행도 표시를 통한 플레이어 행동 유도
* 모바일 및 PC 환경 모두에서 일관된 경험 제공

## 7. 다음 스프린트 계획

### 7.1 개선 과제
* 프로그레스 바 디자인 다양화 (아이템 유형별 다른 스타일)
* 클라이언트-서버 간 동기화 안정성 개선
* 타이머 기반 업데이트를 이벤트 기반 방식으로 최적화

### 7.2 추가 기능
* 건설 가능 영역에 대한 추가 시각적 피드백
* 크로스헤어 커스터마이징 옵션
* 모바일 환경에 최적화된 터치 인터페이스

## 8. 회고 및 느낀점

이번 스프린트에서는 게임 내 시각적 피드백 시스템을 개선함으로써 플레이어 경험을 크게 향상시켰습니다. 특히 원형 프로그레스 바를 통해 설치 진행도를 직관적으로 표현하는 것이 가능해졌습니다.

구현 과정에서 언리얼 엔진의 머티리얼 시스템과 UMG 위젯 블루프린트를 결합하는 방식을 깊이 있게 이해할 수 있었습니다. 특히 블루프린트에서 C++ 컴포넌트와의 상호작용을 설계하는 과정에서 많은 것을 배웠습니다.

또한 BuildingComponent를 확장하여 시간 기반 설치 시스템을 구현함으로써, 기존 즉시 설치 방식보다 전략적인 게임플레이를 유도할 수 있게 되었습니다. 이는 브릿지런의 전략적 팀플레이 특성을 더욱 강화하는 요소가 될 것입니다.

다음 스프린트에서는 이번에 구현한 시각적 피드백 시스템을 더욱 개선하고, 네트워크 최적화를 통해 멀티플레이어 경험을 향상시킬 계획입니다. 특히 이벤트 기반 업데이트 방식으로 전환하여 성능을 개선하는 것이 주요 목표입니다.
